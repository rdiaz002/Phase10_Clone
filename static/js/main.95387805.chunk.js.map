{"version":3,"sources":["reducers/chat.js","reducers/index.js","reducers/playerinfo.js","reducers/gamestate.js","store/index.js","utils/index.js","api.js","components/gamewindow/menu.js","components/card.js","components/gamewindow/submissionView/holdView.js","components/gamewindow/submissionView/submissionView.js","components/gamewindow/cardview.js","containers/cardview.js","components/gamewindow/pickupdeck.js","components/gamewindow/phasecard.js","components/gamewindow/discardpile.js","containers/discardpile.js","components/gamewindow/stackView/stackSubmission.js","components/gamewindow/stackView/stacks.js","containers/stacks.js","components/playerwindow/playerwindow.js","containers/playerList.js","components/dashboard/dashboard.js","containers/dashboard.js","actions/index.js","components/chatwindow/chatwindow.js","containers/index.js","components/namewindow/index.js","components/gamewindow/game.js","containers/game.js","App.js","index.js"],"names":["chatLog","state","action","type","msg","combineReducers","playerName","name","playerID","id","hostID","playerList","gameState","playerState","playerHand","hand","currentPlayer","discardPile","phases","store","createStore","rootReducer","composeWithDevTools","getCurrentPhase","getState","find","player","phase","isCurrentPlayer","getPlayerHand","checks","initial","cards","size","length","cond","forEach","card","number","tempCards","wildCount","wildEnd","customSort","index","parseInt","i","val","initialColor","indeces","buff","numBuff","push","filter","sort","first","second","j","splice","pop","socket","openSocket","process","timeout","reconnection","requestHand","emit","Menu","util","onClick","e","preventDefault","some","STATE","target","disabled","Card","props","cardStyle","backgroundColor","getColor","className","style","key","click","HoldView","color","textDecoration","holdDeck","map","stack","deck","Submission","useState","subDeck","setSubDeck","setPlayerHand","useEffect","currentPhases","patterns","pattern","desc","funcID","utils","handleCardSubmit","currentTarget","returnCard","onSubmit","funcid","minsize","handleCheck","reduce","prev","stacks","submitPhase","toast","autoClose","CardView","showSubmit","setShowSubmit","currentPhase","handleSubmit","handleOnClick","hidden","connect","PickUpDeck","PhaseCard","playerPhase","ind","DiscardPile","StackSubmission","setHand","addToFront","addCard","bundle","newCard","stackIndx","newStack","api","ownerID","console","log","PlayerStacks","showStkSub","setStkSub","setBundle","handleStackClick","phaseState","isPhaseComplete","phaseStacks","PlayerList","isHost","Dashboard","dispatch","Host","dashboard","updatePlayerState","Chat","currentMsg","cb","updateChat","document","getElementById","scrollIntoView","behavior","update","on","value","placeholder","onChange","NameWindow","updatePlayerName","serverNameUpdate","Game","setGlobalState","serverState","actions","setGlobalHand","setPlayerID","stateChangeCB","setupNoti","level","setGlobalStates","alert","setupClient","setupHand","setupNotifications","App","ReactDOM","render","pauseOnFocusLoss"],"mappings":"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","file":"static/js/main.95387805.chunk.js","sourcesContent":["const chatLog = (state = [], action) => {\n  switch (action.type) {\n    case \"UPDATE_CHAT\":\n      return [...state, action.msg];\n    default:\n      return state;\n  }\n};\n\nexport default chatLog;\n","import { combineReducers } from \"redux\";\nimport chatLog from \"./chat\";\nimport {\n  playerName,\n  playerID,\n  hostID,\n  playerList,\n  playerHand,\n  playerState,\n} from \"./playerinfo\";\nimport { gameState, currentPlayer, discardPile, phases } from \"./gamestate\";\n\nexport default combineReducers({\n  playerName,\n  playerID,\n  hostID,\n  playerList,\n  chatLog,\n  gameState,\n  playerState,\n  playerHand,\n  currentPlayer,\n  discardPile,\n  phases,\n});\n","export const playerName = (state = \"\", action) => {\n  switch (action.type) {\n    case \"UPDATE_NAME\":\n      return action.name;\n    default:\n      return state;\n  }\n};\n\nexport const playerID = (state = \"\", action) => {\n  switch (action.type) {\n    case \"UPDATE_ID\":\n      return action.id;\n    default:\n      return state;\n  }\n};\n\nexport const hostID = (state = \"\", action) => {\n  switch (action.type) {\n    case \"UPDATE_HOSTID\":\n      return action.hostID;\n    default:\n      return state;\n  }\n};\n\nexport const playerList = (state = [], action) => {\n  switch (action.type) {\n    case \"UPDATE_PLAYERLIST\":\n      return action.playerList;\n    default:\n      return state;\n  }\n};\n\nexport const playerHand = (state = [], action) => {\n  switch (action.type) {\n    case \"UPDATE_PLAYERHAND\":\n      return action.hand;\n    default:\n      return state;\n  }\n};\n\nexport const playerState = (state = \"PICKUP\", action) => {\n  switch (action.type) {\n    case \"UPDATE_PLAYERSTATE\":\n      if (action.playerState != \"\") {\n        return action.playerState;\n      } else if (state == \"DISCARD\") {\n        return \"PICKUP\";\n      } else {\n        return \"DISCARD\";\n      }\n    default:\n      return state;\n  }\n};\n","export const gameState = (state = \"WAITING\", action) => {\n  switch (action.type) {\n    case \"UPDATE_GAMESTATE\":\n      return action.gameState;\n    default:\n      return state;\n  }\n};\n\nexport const currentPlayer = (state = \"\", action) => {\n  switch (action.type) {\n    case \"UPDATE_TURN\":\n      return !action.currentPlayer ? state : action.currentPlayer;\n    default:\n      return state;\n  }\n};\n\nexport const discardPile = (state = [], action) => {\n  switch (action.type) {\n    case \"UPDATE_PILE\":\n      return !action.discardPile ? state : action.discardPile;\n    default:\n      return state;\n  }\n};\n\nexport const phases = (state = [], action) => {\n  switch (action.type) {\n    case \"UPDATE_PHASES\":\n      return !action.phases ? state : action.phases;\n    default:\n      return state;\n  }\n};\n","import { createStore } from \"redux\";\nimport rootReducer from \"../reducers\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nexport const store = createStore(rootReducer, composeWithDevTools());\n","import { store } from \"../store\";\n\nexport const isHost = () => {\n  const state = store.getState();\n  return state.hostID == state.playerID;\n};\n\nexport const getCurrentPhase = () => {\n  const state = store.getState();\n  const playerPhase = state.playerList.find(\n    (player) => player.id == state.playerID\n  ).phase;\n  return playerPhase;\n};\n\nexport const isCurrentPlayer = () => {\n  const state = store.getState();\n  return state.currentPlayer == state.playerID;\n};\n\nexport const arePlayersReady = () => {\n  const state = store.getState();\n  if (state.playerList.length < 2) {\n    return false;\n  }\n  var ready = !state.playerList.some((player) => {\n    return player.STATE == \"NOT_READY\";\n  });\n\n  return ready;\n};\n\nexport const getPlayerHand = () => {\n  const state = store.getState();\n  return [...state.playerHand];\n};\n\nexport const getPlayerList = () => {\n  const state = store.getState();\n  return state.playerList;\n};\n\nexport const getPhases = () => {\n  return store.getState().phases;\n};\n\nexport const isPhaseComplete = () => {\n  const state = store.getState();\n  return (\n    state.playerList.find((player) => player.id == state.playerID).phaseState ==\n    \"COMPLETE\"\n  );\n};\n\nexport const checks = [\n  (cards = [], size) => {\n    if (cards.length < size) {\n      return false;\n    }\n    var initial;\n    var cond = true;\n\n    cards.forEach((card) => {\n      if (card.type == \"Wild\") {\n        cond = cond && true;\n        return;\n      } else if (card.type == \"Skip\") {\n        cond = cond && false;\n        return;\n      }\n\n      if (initial == null) {\n        initial = card;\n        cond = cond && true;\n      } else if (initial.number == card.number) {\n        cond = cond && true;\n      } else {\n        cond = cond && false;\n      }\n    });\n\n    return cond;\n  },\n  (cards = [], size) => {\n    if (cards.length < size) {\n      return false;\n    }\n    var tempCards = [...cards];\n    var initial;\n    var cond = true;\n    var wildCount = 0;\n    var wildEnd = 0;\n    customSort(tempCards);\n\n    tempCards.forEach((card, index) => {\n      if (initial == null) {\n        if (card.type == \"Wild\") {\n          cond = cond && true;\n          wildCount++;\n          wildEnd = index + 1;\n          return;\n        } else if (card.type == \"Skip\") {\n          cond = cond && false;\n          return;\n        } else {\n          initial = parseInt(card.number);\n          if (initial - wildCount <= 0) {\n            cond = cond && false;\n            return;\n          } else {\n            for (var i = wildEnd - wildCount; i < wildEnd; i++) {\n              cards[i].number = initial - wildCount + i;\n            }\n          }\n          cond = cond && true;\n        }\n      } else {\n        if (card.type == \"Wild\") {\n          initial++;\n          card.number = initial;\n          cond = cond && true;\n        } else if (card.type == \"Skip\") {\n          cond = cond && false;\n          return;\n        } else {\n          var val = parseInt(card.number);\n          if (val == initial + 1) {\n            cond = cond && true;\n            initial = val;\n          } else {\n            cond = cond && false;\n          }\n        }\n      }\n    });\n\n    if (cond) {\n      cards = tempCards;\n    }\n\n    return cond;\n  },\n  (cards, size) => {\n    var initialColor;\n    var cond = true;\n    cards.forEach((card) => {\n      if (!initialColor) {\n        switch (card.type) {\n          case \"Wild\":\n            cond = cond && true;\n            break;\n          case \"Skip\":\n            cond = cond && false;\n            break;\n          default:\n            initialColor = card.type;\n            cond = cond && true;\n            break;\n        }\n      } else {\n        switch (card.type) {\n          case \"Wild\":\n            cond = cond && true;\n            break;\n          case \"Skip\":\n            cond = cond && false;\n            break;\n          default:\n            cond = cond && (card.type == initialColor ? true : false);\n            break;\n        }\n      }\n    });\n    return cond;\n  },\n];\n\nconst customSort = (cards) => {\n  var indeces = [];\n  var buff = [];\n  var numBuff = [];\n  for (var i = 0; i < cards.length; i++) {\n    if (cards[i].number == 0) {\n      indeces.push(i);\n    }\n  }\n  buff = cards.filter((card) => card.number == 0);\n  numBuff = cards.filter((card) => card.number > 0);\n\n  numBuff.sort((first, second) => first.number > second.number);\n\n  for (var i = 0, j = 0; indeces.length > 0; ) {\n    if (j < numBuff.length && indeces[0] > j) {\n      j++;\n    } else if (j < numBuff.length && indeces[0] <= j) {\n      numBuff.splice(j, 0, buff.pop());\n      j++;\n      indeces.splice(0, 1);\n    } else {\n      numBuff.push(buff.pop());\n      indeces.splice(0, 1);\n    }\n  }\n};\n","import openSocket from \"socket.io-client\";\nexport const socket = openSocket(process.env.REACT_APP_SERVER_URL, {\n  timeout: 5000,\n  reconnection: false,\n});\n\nexport const setupClient = (setGlobalStates, setPlayerID, stateChangeCB) => {\n  socket.on(\"ROOM_INFO\", (serverState) => {\n    setGlobalStates(serverState);\n  });\n  socket.on(\"PLAYER_ID\", (id) => {\n    setPlayerID(id);\n  });\n  socket.on(\"NEXT_STATE\", () => {\n    stateChangeCB();\n  });\n\n  socket.on(\"NEW_ROUND\", () => {\n    requestHand();\n    stateChangeCB(\"PICKUP\");\n  });\n  socket.on(\"connect_error\", () => {\n    alert(\n      \"There was an error reaching the server. Refresh the page to try again.\"\n    );\n  });\n\n  socket.on(\"disconnect\", () => {\n    alert(\"You were disconnected. Refresh the page\");\n  });\n};\nexport const setupHand = (setGlobalHand) => {\n  socket.on(\"HAND_REQUEST\", (hand) => {\n    setGlobalHand(hand);\n  });\n};\n\nexport const setupNotifications = (setupNoti) => {\n  socket.on(\"NOTI\", (msg) => {\n    setupNoti(msg);\n  });\n};\nexport const onSocketConnect = (cb) => {\n  socket.on(\"connect\", () => {\n    cb(socket.id);\n  });\n};\n\nexport const setupChat = (cb) => {\n  socket.on(\"NEW_MSG\", (msg) => {\n    cb(msg);\n  });\n};\n\nexport const updatePlayerName = (name) => {\n  socket.emit(\"UPDATE_NAME\", name);\n};\n\nexport const updatePlayerState = () => {\n  socket.emit(\"READY\");\n};\nexport const sendMsg = (msg) => {\n  socket.emit(\"ROOM_MSG\", msg);\n};\n\nexport const startGame = () => {\n  socket.emit(\"START_GAME\");\n};\n\nexport const requestHand = () => {\n  socket.emit(\"CREATE_HAND\");\n};\n\nexport const requestPickup = () => {\n  socket.emit(\"PICKUP_DECK\");\n};\n\nexport const requestPickupDiscard = () => {\n  socket.emit(\"PICKUP_DISCARD\");\n};\n\nexport const requestDiscard = (card) => {\n  socket.emit(\"DISCARD\", card);\n};\n\nexport const submitPhase = (stacks) => {\n  socket.emit(\"PHASE_COMPLETE\", stacks);\n};\n\nexport const updateStack = (playerID, stackIndx, newStack, newCard) => {\n  socket.emit(\"UPDATE_STACK\", { playerID, stackIndx, newStack, newCard });\n};\n","import React from \"react\";\nimport * as util from \"../../utils\";\nimport * as api from \"../../api\";\n\nconst Menu = () => {\n  //Create Check to make sure all players are ready.\n\n  const handleStartClick = (e) => {\n    e.preventDefault();\n    if (util.arePlayersReady()) {\n      api.startGame();\n    }\n  };\n\n  const handleReadyClick = (e) => {\n    e.preventDefault();\n    api.updatePlayerState();\n    e.target.disabled = true;\n  };\n\n  return (\n    <>\n      {util.isHost() ? (\n        <button onClick={handleStartClick}>Start Game</button>\n      ) : (\n        <button onClick={handleReadyClick}>Ready</button>\n      )}\n    </>\n  );\n};\n\nexport default Menu;\n","import React from \"react\";\n\nconst Card = (props) => {\n  const getColor = () => {\n    switch (props.card.type) {\n      case \"Red\":\n        return \"#ff0000\";\n      case \"Green\":\n        return \"#00ff00\";\n      case \"Blue\":\n        return \"#3672F2\";\n      case \"Yellow\":\n        return \"#ffff00\";\n      case \"Wild\":\n        return \"#ffffff\";\n      case \"Skip\":\n        return \"#ffffff\";\n    }\n  };\n\n  const cardStyle = {\n    backgroundColor: getColor(),\n  };\n\n  return (\n    <div\n      className=\"Card\"\n      style={cardStyle}\n      key={props.index}\n      id={props.index}\n      onClick={props.click}\n    >\n      <h2>{props.card.type}</h2>\n      <h1>{props.card.number}</h1>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"../../card\";\nconst HoldView = (props) => {\n  return (\n    <>\n      <div>\n        <h2 style={{ color: \"white\", textDecoration: \"underline\" }}>\n          Completed Stacks\n        </h2>\n        {props.holdDeck.map((stack) => (\n          <div className=\"Container\">\n            {stack.deck.map((card, index) => (\n              <Card card={card} index={index} />\n            ))}\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default HoldView;\n","import React, { useState, useEffect } from \"react\";\nimport * as utils from \"../../../utils\";\nimport HoldView from \"./holdView\";\nimport { submitPhase } from \"../../../api\";\nimport Card from \"../../card\";\nimport { toast } from \"react-toastify\";\n\nconst Submission = (props) => {\n  const [subDeck, setSubDeck] = useState([]);\n  const [holdDeck, setHoldDeck] = useState([]);\n  const [playerHand, setPlayerHand] = useState([]);\n\n  useEffect(() => {\n    props.currentPhases.patterns.forEach((pattern) => {\n      holdDeck.push({ desc: pattern.desc, funcID: pattern.funcID, deck: [] });\n    });\n    setPlayerHand(utils.getPlayerHand());\n  }, []);\n\n  const handleCardSubmit = (e) => {\n    e.preventDefault();\n    setSubDeck([...subDeck, playerHand[e.currentTarget.id]]);\n    playerHand.splice(e.currentTarget.id, 1);\n  };\n\n  const returnCard = (e) => {\n    e.preventDefault();\n    playerHand.push(subDeck[e.currentTarget.id]);\n    subDeck.splice(e.currentTarget.id, 1);\n    setSubDeck([...subDeck]);\n  };\n\n  const handleCheck = (index, funcid, minsize, e) => {\n    e.preventDefault();\n    if (utils.checks[funcid](subDeck, minsize)) {\n      if (holdDeck[index].deck.length > 0) {\n        holdDeck[index].deck.forEach((card) => {\n          playerHand.push(card);\n        });\n        holdDeck[index].deck = subDeck;\n      } else {\n        holdDeck[index].deck = [...subDeck];\n      }\n      setSubDeck([]);\n    } else {\n      subDeck.forEach((card) => {\n        playerHand.push(card);\n      });\n      setSubDeck([]);\n    }\n  };\n\n  const handlePhaseSubmit = (e) => {\n    var res = holdDeck.reduce((prev, stack) => {\n      if (stack.deck.length > 0) {\n        return prev && true;\n      } else {\n        return prev && false;\n      }\n    }, true);\n\n    if (res) {\n      submitPhase(holdDeck);\n      toast(\"Phase Completed\", { type: \"success\", autoClose: 1000 });\n      props.onSubmit(e);\n    } else {\n      toast(\"Must complete all stacks before submission.\", {\n        type: \"error\",\n        autoClose: 1000,\n      });\n    }\n  };\n\n  return (\n    <>\n      <div className=\"SubmissionView\">\n        <div className=\"View\">\n          <button key={0} onClick={props.onSubmit}>\n            X\n          </button>\n        </div>\n        <div className=\"SelectView\">\n          <div className=\"SelectContainer\">\n            {subDeck.map((card, index) => (\n              <Card card={card} key={index} index={index} click={returnCard} />\n            ))}\n          </div>\n          <div className=\"ButtonDiv\">\n            {props.currentPhases.patterns.map((phase, index) => (\n              <button\n                key={index}\n                id={index}\n                onClick={(e) => {\n                  handleCheck(index, phase.funcID, phase.size, e);\n                }}\n              >\n                {phase.desc} {phase.size}\n              </button>\n            ))}\n          </div>\n        </div>\n        <div className=\"SubContainer\">\n          {playerHand.map((card, index) => (\n            <Card\n              card={card}\n              key={index}\n              index={index}\n              click={handleCardSubmit}\n            />\n          ))}\n        </div>\n        <HoldView holdDeck={holdDeck} />\n        <button onClick={handlePhaseSubmit}>Submit Phase</button>\n      </div>\n    </>\n  );\n};\n\nexport default Submission;\n","import React, { useEffect, useState } from \"react\";\nimport { requestHand, requestDiscard } from \"../../api\";\nimport * as utils from \"../../utils\";\nimport Submission from \"./submissionView/submissionView\";\nimport Card from \"../card\";\nconst CardView = ({ playerHand, playerState, phases }) => {\n  const [showSubmit, setShowSubmit] = useState(false);\n  const currentPhase = utils.getCurrentPhase();\n  useEffect(() => {\n    requestHand();\n  }, []);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setShowSubmit(!showSubmit);\n  };\n\n  const handleOnClick = (e) => {\n    e.preventDefault();\n\n    if (utils.isCurrentPlayer() && playerState == \"DISCARD\") {\n      requestDiscard(playerHand[e.currentTarget.id]);\n    }\n  };\n  return (\n    <>\n      <div className=\"CardView\">\n        <div\n          className={\n            utils.isCurrentPlayer() ? \"Container Turn\" : \"Container NoGo\"\n          }\n        >\n          {playerHand.map((card, index) => (\n            <Card card={card} key={index} index={index} click={handleOnClick} />\n          ))}\n        </div>\n      </div>\n      {showSubmit ? (\n        <>\n          <Submission\n            onSubmit={handleSubmit}\n            currentPhases={phases[currentPhase]}\n          />\n        </>\n      ) : null}\n      <button onClick={handleSubmit} hidden={!utils.isCurrentPlayer()}>\n        Submit Phases\n      </button>\n    </>\n  );\n};\n\nexport default CardView;\n","import { connect } from \"react-redux\";\nimport CardView from \"../components/gamewindow/cardview\";\n\nconst mapStateToProps = (state) => ({\n  playerHand: state.playerHand,\n  playerState: state.playerState,\n  currentPlayer: state.currentPlayer,\n  phases: state.phases,\n});\n\nexport default connect(mapStateToProps)(CardView);\n","import React from \"react\";\nimport { requestPickup } from \"../../api\";\nimport * as utils from \"../../utils\";\nconst PickUpDeck = (props) => {\n  const handlePickup = () => {\n    if (utils.isCurrentPlayer() && props.playerState == \"PICKUP\") {\n      requestPickup();\n    }\n  };\n\n  return (\n    <div className=\"Deck\" onClick={handlePickup}>\n      <h2>DECK</h2>\n    </div>\n  );\n};\nexport default PickUpDeck;\n","import React from \"react\";\nimport * as utils from \"../../utils\";\nconst PhaseCard = () => {\n  const phases = utils.getPhases();\n  const playerPhase = utils.getCurrentPhase();\n\n  return (\n    <div className=\"PhaseCard\">\n      <h4>List of Phases</h4>\n      {phases.map((phase, index) => {\n        return (\n          <h4>\n            {playerPhase == index ? \">\" : \"\"}\n            {index + 1}.{\" \"}\n            {phase.patterns.map((pattern, ind) => {\n              return (\n                <span>\n                  {pattern.desc} {pattern.size}\n                  {ind + 1 < phase.patterns.length ? \",\" : \"\"}\n                </span>\n              );\n            })}\n          </h4>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default PhaseCard;\n","import React from \"react\";\nimport PickUpDeck from \"./pickupdeck\";\nimport { requestPickupDiscard } from \"../../api\";\nimport * as utils from \"../../utils\";\nimport Card from \"../card\";\nimport PhaseCard from \"./phasecard\";\nconst DiscardPile = ({ discardPile, playerState }) => {\n  const handleOnClick = (e) => {\n    if (utils.isCurrentPlayer() && playerState == \"PICKUP\") {\n      requestPickupDiscard();\n    }\n  };\n\n  return (\n    <div className=\"Discard\">\n      <PhaseCard />\n      <div className=\"FlexColumn\">\n        <h3>Discard Pile</h3>\n        <div className=\"DiscardContainer\">\n          {discardPile.map((card, index) => (\n            <Card card={card} key={index} index={index} click={handleOnClick} />\n          ))}\n        </div>\n      </div>\n      <PickUpDeck playerState={playerState} />\n    </div>\n  );\n};\n\nexport default DiscardPile;\n","import { connect } from \"react-redux\";\nimport DiscardPile from \"../components/gamewindow/discardpile\";\n\nconst mapStateToProps = (state) => ({\n  discardPile: state.discardPile,\n  playerState: state.playerState,\n});\n\nexport default connect(mapStateToProps)(DiscardPile);\n","import React, { useEffect, useState } from \"react\";\nimport Card from \"../../card\";\nimport * as utils from \"../../../utils\";\nimport * as api from \"../../../api\";\nconst StackSubmission = (props) => {\n  const [playerHand, setHand] = useState([]);\n  var addToFront = false;\n  useEffect(() => {\n    setHand(utils.getPlayerHand());\n  }, []);\n\n  const addCard = (e, index) => {\n    var funcID = props.bundle.stack.funcID;\n    var newCard = playerHand[index];\n\n    var deck = addToFront\n      ? [playerHand[index], ...props.bundle.stack.deck]\n      : [...props.bundle.stack.deck, playerHand[index]];\n\n    if (utils.checks[funcID](deck, deck.length)) {\n      api.updateStack(\n        props.bundle.ownerID,\n        props.bundle.stackIndx,\n        deck,\n        newCard\n      );\n      playerHand.splice(index, 1);\n      props.bundle.stack.deck.push(newCard);\n      setHand(playerHand);\n    } else {\n      console.log(\"BAD CARD\");\n    }\n  };\n\n  return (\n    <div className=\"overlay\">\n      <button onClick={props.onSubmit}>Close</button>\n      <div className=\"Flex\">\n        <button\n          onClick={(e) => {\n            addToFront = true;\n          }}\n        >\n          Front\n        </button>\n        <div className=\"SubContainer\">\n          {props.bundle.stack.deck.map((card, index) => (\n            <Card card={card} index={index} />\n          ))}\n        </div>\n        <button\n          onClick={(e) => {\n            addToFront = false;\n          }}\n        >\n          Back\n        </button>\n      </div>\n      <div className=\"SubContainer\">\n        {playerHand.map((card, index) => (\n          <Card\n            card={card}\n            index={index}\n            click={(e) => {\n              addCard(e, index);\n            }}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default StackSubmission;\n","import React, { useState } from \"react\";\nimport StackSubmission from \"./stackSubmission\";\nimport { isCurrentPlayer, isPhaseComplete } from \"../../../utils\";\nimport Card from \"../../card\";\nconst PlayerStacks = ({ playerList }) => {\n  const [showStkSub, setStkSub] = useState(false);\n  const [bundle, setBundle] = useState({});\n\n  const handleStackClick = (e, playerID, stackIndx) => {\n    if (isCurrentPlayer() && isPhaseComplete()) {\n      var ownerID = playerID;\n      var stack = playerList.find((player) => player.id == playerID)\n        .phaseStacks[stackIndx];\n      setStkSub(!showStkSub);\n      setBundle({ ownerID, stack, stackIndx });\n    }\n  };\n\n  const handleSubmit = () => {\n    setStkSub(!showStkSub);\n  };\n  return (\n    <div className=\"StacksView\">\n      {playerList.map((player, index) => (\n        <div key={index} className=\"StackUnit\">\n          <div>\n            <h2>{player.name}</h2>\n            <h4>phase: {player.phase}</h4>\n          </div>\n          <div className=\"Stack\">\n            {player.phaseStacks.map((stack, index) => (\n              <div\n                className=\"StackContainer\"\n                onClick={(e) => {\n                  handleStackClick(e, player.id, index);\n                }}\n              >\n                {stack.deck.map((card, index) => (\n                  <Card card={card} index={index} />\n                ))}\n              </div>\n            ))}\n          </div>\n        </div>\n      ))}\n      {showStkSub ? (\n        <StackSubmission bundle={bundle} onSubmit={handleSubmit} />\n      ) : null}\n    </div>\n  );\n};\n\nexport default PlayerStacks;\n","import { connect } from \"react-redux\";\nimport PlayerStacks from \"../components/gamewindow/stackView/stacks\";\n\nconst mapStateToProps = ({ playerList }) => ({\n  playerList,\n});\n\nexport default connect(mapStateToProps)(PlayerStacks);\n","import React from \"react\";\nconst PlayerList = ({ playerList, hostID }) => {\n  const isHost = (player) => {\n    return hostID == player.id;\n  };\n\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <th>Players</th>\n          </tr>\n        </thead>\n        <tbody>\n          {playerList.map((player) => {\n            return (\n              <tr key={player.id}>\n                <td>\n                  {player.name === \"\" ? player.id : player.name}\n                  {isHost(player) ? (\n                    <strong> Host</strong>\n                  ) : (\n                    <strong> {player.STATE}</strong>\n                  )}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default PlayerList;\n","import { connect } from \"react-redux\";\nimport PlayerList from \"../components/playerwindow/playerwindow\";\n\nconst mapStateToProps = (state) => ({\n  playerList: state.playerList,\n  hostID: state.hostID,\n  playerID: state.playerID,\n});\n\nexport default connect(mapStateToProps)(PlayerList);\n","import React from \"react\";\nimport PlayerList from \"../../containers/playerList\";\n\nconst Dashboard = ({ dispatch, playerID, playerName, Host }) => {\n  return (\n    <>\n      <PlayerList />\n    </>\n  );\n};\n\nexport default Dashboard;\n","import { connect } from \"react-redux\";\nimport dashboard from \"../components/dashboard/dashboard\";\n\nconst mapStateToProps = (state) => ({\n  playerName: state.playerName,\n  playerID: state.playerID,\n});\n\nexport default connect(mapStateToProps)(dashboard);\n","const updateChat_t = \"UPDATE_CHAT\";\nconst updatePlayerName_t = \"UPDATE_NAME\";\nconst updatePlayerID_t = \"UPDATE_ID\";\nconst updateHostID_t = \"UPDATE_HOSTID\";\nconst updatePlayerList_t = \"UPDATE_PLAYERLIST\";\nconst updateGameState_t = \"UPDATE_GAMESTATE\";\nconst updatePlayerHand_t = \"UPDATE_PLAYERHAND\";\nconst updateCurrentPlayer_t = \"UPDATE_TURN\";\nconst updateDiscardPile_t = \"UPDATE_PILE\";\nconst updatePlayerState_t = \"UPDATE_PLAYERSTATE\";\nconst updatePhases_t = \"UPDATE_PHASES\";\nexport const updateChat = (msg) => ({\n  type: updateChat_t,\n  msg,\n});\n\nexport const updatePlayerID = (id) => ({\n  type: updatePlayerID_t,\n  id,\n});\n\nexport const updatePlayerName = (name) => ({\n  type: updatePlayerName_t,\n  name,\n});\n\nexport const updateHostID = (hostID) => ({\n  type: updateHostID_t,\n  hostID,\n});\n\nexport const updatePlayerList = (playerList) => ({\n  type: updatePlayerList_t,\n  playerList,\n});\n\nexport const updateGameState = (gameState) => ({\n  type: updateGameState_t,\n  gameState,\n});\n\nexport const updatePlayerHand = (hand) => ({\n  type: updatePlayerHand_t,\n  hand,\n});\n\nexport const updateCurrentPlayer = (currentPlayer) => ({\n  type: updateCurrentPlayer_t,\n  currentPlayer,\n});\n\nexport const updateDiscardPile = (discardPile) => ({\n  type: updateDiscardPile_t,\n  discardPile,\n});\n\nexport const updatePlayerState = (playerState) => ({\n  type: updatePlayerState_t,\n  playerState,\n});\n\nexport const updatePhases = (phases) => ({\n  type: updatePhases_t,\n  phases,\n});\n","import React, { useEffect } from \"react\";\nimport { setupChat, sendMsg } from \"../../api\";\nimport { updateChat } from \"../../actions\";\nimport { store } from \"../../store\";\nconst Chat = ({ dispatch, chatLog }) => {\n  var currentMsg = \"\";\n\n  const update = (msg) => {\n    dispatch(updateChat(msg));\n    document.getElementById(\"dummy\").scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    setupChat((msg) => {\n      update(msg);\n    });\n  }, []);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    sendMsg(store.getState().playerName + \": \" + currentMsg);\n    document.getElementById(\"chatbar\").value = \"\";\n  };\n\n  const onChange = (e) => {\n    currentMsg = e.target.value;\n  };\n  return (\n    <div className=\"Chat\">\n      <div className=\"ChatWindow\" id=\"chatwindowdiv\">\n        {chatLog.map((value) => {\n          return <h2>{value}</h2>;\n        })}\n        <div id=\"dummy\"></div>\n      </div>\n      <form onSubmit={onSubmit}>\n        <label>\n          Message:\n          <input\n            id=\"chatbar\"\n            type=\"text\"\n            placeholder=\"Type here\"\n            onChange={onChange}\n          />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    </div>\n  );\n};\nexport default Chat;\n","import { connect } from \"react-redux\";\nimport Chat from \"../components/chatwindow/chatwindow\";\n\nconst mapStatetoProps = (state) => ({\n  chatLog: state.chatLog,\n});\n\nexport default connect(mapStatetoProps)(Chat);\n","import React from 'react'\nimport {updatePlayerName} from '../../actions'\nimport {updatePlayerName as serverNameUpdate} from '../../api'\nconst NameWindow=(props)=>{\n\n    var name=\"\"\n\n    const handleChange=(e)=>{\n        name=e.target.value\n    }\n    const handleSubmit=(e)=>{\n        e.preventDefault();\n        if(name!==\"\"){\n            props.dispatch(updatePlayerName(name))\n            serverNameUpdate(name)\n        }\n    }\n\n    return (\n        <div className=\"overlay\">\n        <form className= \"nameChangeForm\">\n        <input type=\"text\" onChange={handleChange} placeholder=\"Enter Your Name\"/>\n        <button onClick= {handleSubmit}>Submit</button>\n        </form>\n        </div>\n    )\n}\n\nexport default NameWindow\n","import React, { useEffect } from \"react\";\nimport Menu from \"./menu\";\nimport CardView from \"../../containers/cardview\";\nimport DiscardPile from \"../../containers/discardpile\";\nimport PlayerStacks from \"../../containers/stacks\";\nimport Dashboard from \"../../containers/dashboard\";\nimport Chat from \"../../containers\";\nimport NameWindow from \"../../components/namewindow\";\nimport { setupClient, setupHand, setupNotifications } from \"../../api\";\nimport { toast } from \"react-toastify\";\nimport * as actions from \"../../actions\";\n\nconst Game = ({ dispatch, state }) => {\n  const setGlobalState = (serverState) => {\n    dispatch(actions.updateHostID(serverState.hostID));\n    dispatch(actions.updatePlayerList(serverState.playerList));\n    dispatch(actions.updateGameState(serverState.gameState));\n    dispatch(actions.updateCurrentPlayer(serverState.currentPlayer));\n    dispatch(actions.updateDiscardPile(serverState.discardPile));\n    dispatch(actions.updatePhases(serverState.phases));\n  };\n  const setGlobalHand = (hand) => {\n    dispatch(actions.updatePlayerHand(hand));\n  };\n\n  const setPlayerID = (id) => {\n    dispatch(actions.updatePlayerID(id));\n  };\n\n  const stateChangeCB = (state = \"\") => {\n    dispatch(actions.updatePlayerState(state));\n  };\n\n  const setupNoti = (msg, level = \"info\") => {\n    toast(msg, { autoClose: 2000, type: level });\n  };\n\n  useEffect(() => {\n    setupClient(setGlobalState, setPlayerID, stateChangeCB);\n    setupHand(setGlobalHand);\n    setupNotifications(setupNoti);\n  }, []);\n\n  return (\n    <div className=\"Game\">\n      {state.gameState == \"FULL\" ? (\n        <h1>GAME IN PROGRESS</h1>\n      ) : state.gameState == \"Running\" ? (\n        <>\n          <PlayerStacks />\n          <DiscardPile />\n          <CardView />\n          <Chat />\n        </>\n      ) : (\n        <>\n          {state.playerName == \"\" && state.gameState == \"WAITING\" ? (\n            <NameWindow className=\"overlay\" dispatch={dispatch} />\n          ) : null}\n          <Dashboard />\n          <Menu />\n          <Chat />\n        </>\n      )}\n    </div>\n  );\n};\nexport default Game;\n","import { connect } from \"react-redux\";\nimport Game from \"../components/gamewindow/game\";\n\nconst mapStateToProps = (state) => ({\n  state,\n});\n\nexport default connect(mapStateToProps)(Game);\n","import React from \"react\";\nimport \"./App.css\";\nimport \"../node_modules/react-toastify/dist/ReactToastify.css\";\nimport Game from \"./containers/game\";\n\nconst App = () => {\n  return (\n    <>\n      <Game />\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\nimport { ToastContainer } from \"react-toastify\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <ToastContainer pauseOnFocusLoss={false} />\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}